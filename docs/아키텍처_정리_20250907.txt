

UI / View
   ⬇︎(React 훅 전용)
Controller (Reader/Writer)
   ⬇︎(얇은 파사드 호출만)
Engine Facade
   ⬇︎(순수 함수만 호출)
Domain Services (selectors / policies / ops)
   ⬇︎(store action or patch)
Store (zustand slices) / persistence / I/O
------------------------------------------------------------------------------------------------------------------------

1) 폴더/레이어 구조(최종)
핵심: 도메인 로직(파생/정책/검증)은 Domain Services로, 상태 쓰기 라우팅은 Engine으로, React 훅은 Controller에만 둡니다.
------------------------------------------------------------------------------------------------------------------------
src/figmaV3/
  controllers/
    left/
      useLeftPanelController.ts         // 이미 사용중인 패턴 유지
    right/
      useInspectorController.ts
    topbar/
      useTopbarController.ts
    bottom/
      useBottomPanelController.ts
  engine/
    EditorEngine.ts                      // 얇은 파사드: 상태 라우팅 + 슬라이스 액션 호출 + 패치 폴백만
    selectors/
      domain/                            // 단일 도메인 파생값
        nodes.ts
        pages.ts
        ui.ts
      cross/                             // 다중 도메인 조합 파생값
        outline.ts
        selection.ts
      styles.ts                          // 스타일 파생값(예: getEffectiveDecl)
  domain/                                // ← 신규
    policies/
      StylePolicyService.ts              // 팔레트/폰트/프리셋 조회 (순수)
      index.ts
    ops/
      nodes.ts                           // 트리 재배치, 검증 등 순수 연산
      pages.ts
      flows.ts
  policy/
    globalStylePolicy.ts                 // 상수(SSOT)
    stylePresets.ts                      // 상수(SSOT)
  store/
    EditorStore.ts
    slices/
      nodeSlice.ts
      pageSlice.ts
      uiSlice.ts
      dataSlice.ts
      fragmentSlice.ts
      historySlice.ts
    types.ts                             // Store 타입의 SSOT
  core/
    types.ts                              // 도메인 모델 SSOT
    constants.ts                          // 공통 enum/리터럴 집합
    utils.ts                              // 공용 유틸(타입가드 포함)
------------------------------------------------------------------------------------------------------------------------

2) 타입 정책(SSOT = Single Source Of Truth)

2.1 모델 타입 SSOT
	•	src/figmaV3/core/types.ts를 도메인 모델의 유일 출처로 고정합니다.
	•	예) Project, Page, Node<TProps, TStyles>, EditorUI, Viewport, ViewportMode, StyleGraphMode('Unified'|'Independent'), FlowEdge, CSSDict …
------------------------------------------------------------------------------------------------------------------------
// core/types.ts (발췌)
export const VIEWPORTS = ['desktop','tablet','mobile'] as const;
export type Viewport = typeof VIEWPORTS[number];

export const VIEWPORT_MODES = ['size','fit','fill'] as const;
export type ViewportMode = typeof VIEWPORT_MODES[number];

export type StyleGraphMode = 'Unified' | 'Independent';

export interface EditorUI {
  mode: 'design' | 'preview';
  isAdmin?: boolean;
  selectedId: string | null;
  panels: {
    left: {
      activeHubTab: 'layers' | 'pages' | 'components' | 'assets' | 'templates' | 'stylesheets' | 'palette';
      isSplit: boolean;
      splitPercentage: number;
      lastActivePageId: string | null;
      lastActiveFragmentId?: string | null;
    };
    right: { /* ... */ };
    bottom: { /* ... */ };
  };
  canvas: {
    activeViewport: Viewport;
    baseViewport: Viewport;
    vpMode: Record<Viewport, ViewportMode>;
    zoom: number;
    width: number;
    height: number;
    orientation: 'portrait' | 'landscape';
    styleGraph: StyleGraphMode;
  };
}

export interface Project {
  id: string;
  name: string;
  rootId: string;
  pages: Page[];
  nodes: Record<string, Node>;
  fragments?: { id: string; name?: string; rootId: string }[];
  assets?: { id: string; name: string; url: string }[];
  globalCss?: string;
  globalJs?: string;
}

export interface Node<P = Record<string, unknown>, S = Record<string, unknown>> {
  id: string;
  type: string;
  props: P;
  styles: S;
  children?: string[];
  isVisible?: boolean; // ← 모델에 존재하는 플래그만 사용
  locked?: boolean;
}

export interface CSSDict { [k: string]: string | number | undefined }

------------------------------------------------------------------------------------------------------------------------

중요: 과거 hidden/parentId 같이 모델에 없던 필드는 사용 금지. children[]로만 계층 관리.

2.2 Store 타입 SSOT
	•	src/figmaV3/store/types.ts는 zustand state 타입의 유일 출처.
	•	슬라이스가 추가/변경될 때 여기에만 반영 → Engine과 Controller는 여기 타입만 의존.

2.3 상수/리터럴/가드 SSOT
	•	core/constants.ts에 리터럴 배열, enum-ish 상수 모읍.
	•	utils/guards.ts 등에 타입가드를 둬 문자열 인덱싱 오류 제거.
------------------------------------------------------------------------------------------------------------------------
// core/constants.ts
export const HUB_TABS = ['layers','pages','components','assets','templates','stylesheets','palette'] as const;
export type HubTab = typeof HUB_TABS[number];

// core/utils.ts
import { VIEWPORTS, type Viewport } from './types';

export const isViewport = (v: string): v is Viewport =>
  (VIEWPORTS as readonly string[]).includes(v as any);

------------------------------------------------------------------------------------------------------------------------

3) Engine Facade(얇게 유지)

상태 읽기/구독/슬라이스 액션 호출 + 폴백 패치만.
정책/프리셋/파생값 계산은 여기서 하지 않음(Domain Services로 이동).
------------------------------------------------------------------------------------------------------------------------

// engine/EditorEngine.ts (핵심 인터페이스만 발췌)
export const EditorEngine = {
  // store
  getState(): EditorStoreState { /* ... */ },
  subscribe(listener: () => void): Unsubscribe { /* ... */ },

  // 패치
  update(mutator: (draft: EditorState) => void, _sync?: boolean) { /* (이미 보유한 패치 방식 사용) */ },
  updatePatch(mutator: (h: PatchHelpers) => void) { /* 부분 패치 버퍼 */ },

  // UI
  getUI(): EditorUI { /* ... */ },
  setEditorMode(mode: EditorMode) { /* ... */ },
  setActiveHubTab(tab: HubTab) { /* ... */ },
  toggleLeftPanelSplit() { /* ... */ },
  setLeftPanelSplitPercentage(pct: number) { /* ... */ },
  setActiveViewport(vp: Viewport) { /* ... */ },
  setBaseViewport(vp: Viewport) { /* ... */ },
  setViewportMode(vp: Viewport, mode: ViewportMode) { /* ... */ },
  setCanvasSize(size: {width:number;height:number}) { /* ... */ },
  setCanvasZoom(zoom: number) { /* ... */ },
  toggleCanvasOrientation() { /* ... */ },
  setNotification(msg: string) { /* ... */ },

  // Nodes (읽기/쓰기)
  getNode(id: NodeId | null | undefined): Node | null { /* ... */ },
  getNodes(ids?: NodeId[] | null): Node[] { /* ... (배열이면 map/filter) */ },
  getCurrentNode(): Node | null { /* ... (ui.selectedId 기반) */ },
  setCurrentNode(id: NodeId | null) { /* ... */ },
  setNodeVisibility(id: NodeId, visible: boolean) { /* … isVisible */ },
  setNodeLocked(id: NodeId, locked: boolean) { /* ... */ },
  moveNode(id: NodeId, parentId: NodeId, index?: number) { /* children 재배치 */ },
  removeNodeCascade(id: NodeId) { /* DFS 삭제 */},
  updateNodeProps(id: NodeId, patch: Record<string,unknown>) { /* ... */ },
  updateNodeStyles(id: NodeId, patch: CSSDict, vp?: Viewport) { /* ... */ },

  // Pages
  getPages(): Page[] { /* ... */ },
  getCurrentPage(): Page | null { /* ... */ },
  setCurrentPage(id: string) { /* ... */ },
  addPage(name?: string): string { /* ... */ },
  removePage(id: string) { /* ... */ },
  duplicatePage(id: string) { /* ... */ },
  updatePageMeta(id: string, patch: Partial<Page>) { /* ... */ },

  // Components/Fragments
  getComponents(): { id: string; name?: string; rootId: string }[] { /* project.fragments */ },
  addComponent(name: string): string { /* ... */ },
  updateComponent(id: string, patch: any) { /* ... */ },
  removeComponent(id: string) { /* ... */ },
  publishComponent(id?: string) { /* no-op fallback */},
  openComponentEditor(id: string) { /* ui.panels.left.lastActiveFragmentId = id */},
  insertComponent(id: string, parentId?: NodeId, idx?: number) { /* fallback: no-op */},

  // Assets / Global code
  getAssets(): { id: string; name: string; url: string }[] { /* ... */ },
  addAsset(f: File | {name: string; url: string}) { /* ... */ },
  removeAsset(id: string) { /* ... */ },
  updateGlobalCss(css: string) { /* ... */ },
  updateGlobalJs(js: string) { /* ... */ },

  // Flows
  getFlowEdges(): Record<string, FlowEdge> { /* ... */ },
  addFlowEdge(edge: FlowEdge) { /* ... */ },
  updateFlowEdge(id: string, patch: Partial<FlowEdge>) { /* ... */ },
  removeFlowEdge(id: string) { /* ... */ },

  // Outline (cross-selector 위임 or 단순 폴백)
  getOutline() { /* selectors.cross.outline() 존재시 호출, 아니면 폴백 */ },
};
------------------------------------------------------------------------------------------------------------------------

4) Domain Services(정책/파생값/연산)
4.1 Policy 서비스
------------------------------------------------------------------------------------------------------------------------
// domain/policies/StylePolicyService.ts
import { GLOBAL_STYLE_POLICY } from '../../policy/globalStylePolicy';
import { stylePresets } from '../../policy/stylePresets';
import type { EditorStoreState } from '../../store/types';

export const StylePolicyService = {
  getStylePolicy(_s: EditorStoreState) { return GLOBAL_STYLE_POLICY; },
  getColorPalette(_s: EditorStoreState) { return GLOBAL_STYLE_POLICY.colors.palette; },
  getFontFamilies(_s: EditorStoreState) { return GLOBAL_STYLE_POLICY.typography.fontFamilies; },
  getShadowPresets(_s: EditorStoreState) { return stylePresets.shadows; },
  getFilterPresets(_s: EditorStoreState) { return stylePresets.filters; },
  getGradientPolicy(_s: EditorStoreState) { return GLOBAL_STYLE_POLICY.gradients; },
};

------------------------------------------------------------------------------------------------------------------------
4.2 Selectors(순수)
	•	engine/selectors/styles.ts에 effectiveDecl(state,nodeId) 등 이미 있는 함수 유지/보강.
	•	React 사용 금지.

4.3 Ops(순수)
	•	트리 재배치, 삭제, 유효성 검사 등 순수 함수는 domain/ops/*.ts로 분리 → Engine이 필요 시 호출.

------------------------------------------------------------------------------------------------------------------------
5) Controllers (Reader/Writer 일관 패턴)

공통 규칙
	•	훅은 컨트롤러에만.
	•	useSyncExternalStore(EditorEngine.subscribe, EditorEngine.getState, EditorEngine.getState)
	•	Reader: 스냅샷을 읽고 Domain Services로 파생/정책을 계산 후 노출
	•	Writer: Engine 메서드만 호출 (상태 쓰기 금지)

예시: Left(이미 사용중인 패턴 유지)
	•	useLeftPanelController(domains: LeftDomain[])
	•	reader 공통: getProject/getUI/getNodeById/getNode/isAdmin
	•	writer 공통: update(mutator), setNotification()
	•	도메인별 read/write를 얕게 머지(충돌가드 유지)

Top/Right/Bottom도 동일 패턴로 구성
	•	Topbar: Viewport/Canvas/UI 모드/StyleGraph(뷰 전용 토글) → Reader는 정책 X, Writer는 Engine 호출만
	•	Right(Inspector): 노드/스타일 파생값은 selectors/styles 호출, 정책은 StylePolicyService 호출, Writer는 Engine.updateNode*
	•	Bottom: data/actions/flows는 읽기 selectors(or state 직독) + Writer는 Engine의 add/update/remove*

------------------------------------------------------------------------------------------------------------------------

6) 네이밍 통일 & @deprecated

유지할 신규 이름(예)
	•	Node: getNode/getNodes/getCurrentNode/setCurrentNode/setNodeVisibility/setNodeLocked/moveNode/removeNodeCascade/updateNodeProps/updateNodeStyles
	•	Pages: getPages/getCurrentPage/setCurrentPage/addPage/removePage/duplicatePage/updatePageMeta
	•	Components: getComponents/addComponent/updateComponent/removeComponent/insertComponent/publishComponent/openComponentEditor
	•	Assets/Global: getAssets/addAsset/removeAsset/updateGlobalCss/updateGlobalJs
	•	UI: getUI/setEditorMode/setActiveHubTab/toggleLeftPanelSplit/setLeftPanelSplitPercentage/setActiveViewport/setBaseViewport/setViewportMode/setCanvasSize/setCanvasZoom/toggleCanvasOrientation/setNotification
	•	Flows: getFlowEdges/addFlowEdge/updateFlowEdge/removeFlowEdge

------------------------------------------------------------------------------------------------------------------------
/** @deprecated use setCurrentPage */
selectPage: (id: string) => EditorEngine.setCurrentPage(id),

/** @deprecated use setNodeVisibility(id, boolean) */
toggleNodeVisibility: (id: string) =>
  EditorEngine.setNodeVisibility(id, !EditorEngine.getNode(id)?.isVisible),

ESLint rule로 @deprecated 사용 시 경고(또는 CI fail) 설정 권장.

------------------------------------------------------------------------------------------------------------------------
7) 타입 안정 가이드
	•	인덱싱 가드: isViewport() 같은 가드 필수.
	•	읽기 안전화: const map = state.project?.nodes ?? {}; 후 사용.
	•	정확한 반환 타입: Controller Reader는 구체 타입 반환(예: Node | null, Page[])
	•	초기값 보장: Store 초기 상태에서 project.pages = [], project.nodes = {} 같은 빈 값 초기화.
	•	no any 정책: 컨트롤러/서비스/엔진 공개 API에 any 금지. unknown → 좁히기 or 제네릭.

------------------------------------------------------------------------------------------------------------------------

8) 적용 순서(실행 체크리스트)
	1.	core/types.ts/store/types.ts를 SSOT로 재확인(누락 필드/이질 필드 제거: hidden/parentId 금지).
	2.	domain/policies/StylePolicyService.ts 생성 및 Right 패널들이 여기서 정책 값 가져가도록 변경.
	3.	engine/EditorEngine.ts를 슬림화 + 누락 메서드 보강(위 인터페이스 기준).
	4.	Left/Right/Top/Bottom 컨트롤러를 동일 패턴으로 정리(Reader/Writer, 훅 only).
	5.	Selector/ops는 훅 없이 순수 함수로 유지/보강.
	6.	ESLint/TS 설정 강화(엄격 모드, no-any, no-deprecated 사용 경고).

------------------------------------------------------------------------------------------------------------------------


