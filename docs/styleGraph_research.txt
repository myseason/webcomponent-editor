
StyleGraph 방식의 스타일 관리 조사 정리
=================================

1. StyleGraph 개념
------------------
- 공통(Base) 스타일 구조를 유지하면서, 다양한 PoC(Profile of Context: Desktop, Tablet, Mobile 등)에 대해 차분(Override) 방식으로 관리하는 구조.
- 각 PoC는 전체 스타일을 복제하지 않고 **변경된 속성만 기록**한다.
- 최종 스타일은 Base + Active PoC의 Delta(차분)를 병합하여 계산된다.

2. 유사 서비스 사례
-------------------

(1) Draftbit
- React Native 기반 앱 빌더.
- 기본 스타일 시트(Base)를 유지하면서, 기기별/플랫폼별 오버라이드를 delta로 저장.
- Breakpoints를 설정하면 해당 뷰포트에서만 적용되는 속성만 별도 저장.

(2) Plasmic
- 웹 빌더/디자인 툴.
- 스타일 시스템은 기본 스타일(Base) + Variants(조건부 스타일) 구조로 관리.
- Responsive 설정 시 특정 breakpoint에서만 다른 값이 필요한 속성만 별도 delta로 기록.

(3) Bubble
- 노코드 웹앱 빌더.
- Reusable element나 Container에 Base 스타일 정의 후, Responsive Editor에서 조건부 스타일만 override.
- 전체 스타일을 복사하지 않고 변경된 값만 기록하여 관리.

(4) Figma (참고)
- Auto Layout, Breakpoint plugin 등에서도 비슷한 구조를 채택.
- 기본 노드의 스타일을 유지하면서, Breakpoint plugin을 이용해 특정 해상도에서만 다른 속성 적용.

3. 공통된 특징
--------------
- **공통(Base) 스타일**: 모든 컨텍스트에 기본 적용되는 스타일.
- **Delta(차분) 저장**: 특정 PoC에서만 다른 값이 필요한 속성만 기록.
- **병합 규칙**: 최종 스타일은 Base + Delta 병합.
- **UI 지원**:
  - "공통/개별" 토글: Base에 저장할지, 특정 PoC Delta에 저장할지 선택.
  - "기준 PoC" 설정: 디자이너가 기준이 되는 뷰포트를 지정.
- **효율성**: 스타일 중복을 최소화하고 관리 용이성 확보.

4. 장점과 단점
--------------
장점:
- 코드/데이터 경량화: 중복 스타일 저장 최소화.
- 관리 용이: 공통 수정은 Base만 수정하면 모든 PoC에 반영.
- 유연성: 특정 PoC에만 다른 스타일 지정 가능.

단점:
- Delta가 많아지면 관리 복잡도 증가.
- 기준(Base)와 Delta 병합 규칙이 명확해야 충돌 방지 가능.
- 일부 사용자에게는 Base/개별 개념이 직관적이지 않을 수 있음.

5. 결론
-------
- Draftbit, Plasmic, Bubble 등 유사 에디터들은 모두 "Base + Delta" 방식으로 스타일을 관리하고 있다.
- 이를 "StyleGraph"라고 부르며, 스타일을 트리 구조로 표현하고 병합을 통해 최종 스타일을 계산하는 패턴이 일반적이다.
- 본 프로젝트에서도 동일한 패턴을 채택하는 것이 검증된 방식이며, Topbar에서 "공통/개별", "기준 PoC"를 선택하는 UX가 자연스럽다.
