======================================================================
  Actionable Web Editor 최종 상세 기획안 (v5.1)
======================================================================

I. 목적 및 핵심 철학
----------------------------------------------------------------------

### 1. 프로젝트 비전
본 프로젝트는 **'Actionable 컴포넌트'** 기반의 **No-code/Low-code 웹 서비스 빌더**를 지향한다. 사용자는 이 에디터를 통해 재사용 가능한 컴포넌트를 시각적으로 설계하고, 이 컴포넌트들을 조립하여 데이터 바인딩과 상호작용(Flow)이 포함된 동적인 웹 페이지와 서비스를 손쉽게 구축할 수 있다.

### 2. 핵심 철학
에디터는 네 가지 핵심 개념을 중심으로 구축된다.

* **역할 분리 (Role Separation)**: '컴포넌트 제작자'와 '페이지 빌더'의 역할을 명확히 분리하여, 디자인 시스템의 일관성을 유지하면서 협업 효율성을 극대화한다.
* **모드 전환 (Context Switching)**: 사용자의 작업 목표에 따라 `컴포넌트 개발 모드`와 `페이지 빌드 모드`를 명시적으로 전환하여, 각 작업에 최적화된 도구와 환경을 제공한다.
* **정책 기반 UI (Policy-Driven UI)**: 컴포넌트의 본질(HTML 태그)과 제작자의 의도에 따라 편집 UI(`Inspector`)가 동적으로 변경되어, 사용자의 실수를 방지하고 직관적인 편집 경험을 제공한다.
* **템플릿 재사용 (Template Reusability)**: 잘 디자인된 컴포넌트와 페이지 레이아웃을 템플릿으로 저장하고 재사용하여, 반복 작업을 최소화하고 서비스 전체의 품질과 일관성을 높인다.

---

## II. 에디터 아키텍처

### 1. 주요 구성 요소
에디터는 5개의 주요 UI 영역과 1개의 상태 관리 시스템으로 구성된다.

* **상단바 (Topbar)**: 뷰포트, 캔버스 배율, 실행 취소/복귀 등 **글로벌 보기 상태**를 제어한다.
* **왼쪽 패널 (Project Hub)**: 페이지, 컴포넌트, 에셋 등 **프로젝트의 모든 리소스**를 관리하고 탐색하는 중앙 허브 역할을 한다.
* **중앙 캔버스 (Canvas)**: 실제 웹 페이지나 컴포넌트가 렌더링되는 **시각적 작업 공간**이다.
* **오른쪽 패널 (Inspector)**: 선택된 요소(페이지, 노드, 컴포넌트)의 속성과 스타일을 편집하는 **상세 편집 공간**이다.
* **하단 도크 (Bottom Dock)**: 데이터, 액션, 플로우 등 페이지의 **동적인 상호작용과 로직**을 설정하는 전문가용 공간이다.
* **상태 관리 (State Management)**: `Zustand`를 기반으로 하는 `editStore`가 프로젝트 데이터, UI 상태, 편집 히스토리 등 모든 상태를 중앙에서 관리한다.

### 2. 사용자 역할과 모드
* **컴포넌트 제작자 (Creator)**: `🛠️ 컴포넌트 개발 모드`에서 작업한다.
    * **목표**: 재사용 가능한 컴포넌트의 구조, 속성, 기본 스타일, 그리고 페이지 빌더를 위한 수정 권한 정책을 정의한다.
    * **주요 사용 패널**: `Components`, `Layers`, `Inspector`.
* **페이지 빌더 (Builder)**: `🚀 페이지 빌드 모드`에서 작업한다.
    * **목표**: 제작자가 만든 컴포넌트와 페이지 템플릿을 활용하여 실제 웹 페이지를 완성하고, 데이터와 상호작용을 연결한다.
    * **주요 사용 패널**: `Pages`, `Components`, `Assets`, `Inspector`, `Bottom Dock`.

---

## III. 상세 기능 명세

### 1. 상단바 (Topbar)
* **페이지 컨텍스트**: 현재 `페이지 빌드 모드`에서 편집 중인 페이지를 선택하거나, `컴포넌트 개발 모드`임을 명시적으로 표시한다.
* **실행 취소/다시 실행**: 모든 편집 작업을 되돌리거나(`Undo`) 다시 실행(`Redo`)한다. (단축키: `Cmd/Ctrl + Z/Y`)
* **뷰포트 컨트롤**: `Desktop`, `Tablet`, `Mobile` 아이콘으로 캔버스 프리셋을 변경하고, 스타일 상속의 기준이 될 **Base 뷰포트**를 지정하며, 스타일 편집 모드를 `통합(Unified)` 또는 `개별(Independent)`로 전환한다.
* **캔버스 컨트롤**: 캔버스의 너비/높이, 확대/축소(`Zoom`) 비율을 조절한다.

### 2. 왼쪽 패널 (Project Hub)

* **모드 스위처**: 패널 최상단에서 `페이지 빌드 모드`와 `컴포넌트 개발 모드`를 전환한다.
* **수직 탭 바**: `Pages`, `Assets`, `Components`, `Layers` 등 각 기능 패널로 전환하는 아이콘 바. **(제안: '컴포넌트 개발 모드'에서는 'Components'와 'Layers' 탭만 노출하여 작업 집중도 향상)**

#### 2.1. Pages 패널 (`🚀 페이지 빌드 모드` 전용)
* **페이지 목록**: 프로젝트의 모든 페이지를 표시하며, 클릭 시 해당 페이지를 캔버스에 연다. 현재 열린 페이지에는 `OPEN` 배지가 표시된다.
* **페이지 액션**: 각 페이지 항목 우측의 `...` 메뉴를 통해 `Duplicate`, `Delete`, `Save as Template` 기능을 제공한다.
* **템플릿 기반 생성**: 패널 하단 'Templates' 섹션에서 `Blank Page` 또는 저장된 페이지 템플릿을 선택하여 `+ Create Page` 버튼으로 즉시 새 페이지를 생성한다.

#### 2.2. Components 패널
* **`🚀 페이지 빌드 모드`**: `Project Components`(사용자 제작)와 `Library`(기본 제공) 컴포넌트 목록을 표시하며, 캔버스로 드래그 앤 드롭하여 사용한다.
* **`🛠️ 컴포넌트 개발 모드`**: 
    * **컴포넌트 관리**: `+ New` 버튼으로 새 컴포넌트를 생성하고, 목록에서 컴포넌트의 이름과 설명을 편집하거나 삭제한다.
    * **컴포넌트 라이브러리**: `Box`, `Text` 등 기본 컴포넌트를 조합하여 새 컴포넌트를 만들 수 있도록 라이브러리 컴포넌트 목록을 함께 제공한다.

#### 2.3. Assets 패널 (`🚀 페이지 빌드 모드` 전용)
* **미디어 라이브러리**: 이미지, 비디오 등 정적 자산을 업로드하고 관리한다.
* **코드 에디터 (전문가 모드)**: `Expert Mode` 활성화 시, 전역 `Scripts`(JS)와 `Styles`(CSS)를 편집할 수 있는 탭이 노출된다.

#### 2.4. Layers 패널
* **계층 구조**: 현재 작업 중인 페이지 또는 컴포넌트의 DOM 구조를 시각적으로 보여준다.
* **상호작용**: 노드 선택, 드래그 앤 드롭을 통한 구조 변경, 보이기/숨기기, 잠금, 삭제 기능을 제공한다.

### 3. 오른쪽 패널 (Inspector)

#### 3.1. `🛠️ 컴포넌트 개발 모드` (For Creator)
* **Common Section**: 컴포넌트의 기본 HTML 태그(`div`, `button` 등)를 변경한다.
* **Properties & Permissions**:
    * 컴포넌트가 기본적으로 가지고 있는 속성(예: `<img>`의 `src`)의 **기본값**을 설정한다.
    * 각 속성 옆의 **자물쇠(🔒) 아이콘**을 클릭하여 페이지 빌더의 수정 권한을 제어(`Open`/`Lock`)한다.
* **Styles & Permissions**:
    * 컴포넌트의 기본 스타일을 설정한다.
    * 각 스타일 섹션 및 개별 속성 옆의 **자물쇠(🔒) 아이콘**을 클릭하여 페이지 빌더의 수정 권한을 제어한다.
* **Schema Editor**:
    * `+ Add Prop` 버튼으로 페이지 빌더에게 노출될 **새로운 사용자 정의 속성을 추가**한다.
    * 추가된 속성의 `key`, `type`(text, select 등), `label` 등을 상세히 정의한다.

#### 3.2. `🚀 페이지 빌드 모드` (For Builder)
* **정책 기반 UI**: `Inspector`는 컴포넌트의 기본 태그(`TagPolicy`)와 제작자가 설정한 권한(`Component Policy`)을 조합하여, **허용된 속성과 스타일 필드만 동적으로 렌더링한다.**
* **속성 편집**:
    * 허용된 컴포넌트 속성의 값을 변경한다.
    * 데이터 바인딩(`{...}`) 아이콘을 클릭하여 `DataBindingPopover`를 열고, 전역 데이터(`state.data`)를 컴포넌트 속성에 연결한다.
* **스타일 편집**: 허용된 스타일 속성의 값을 변경한다.
* **전문가 모드 (Expert Mode)**: `Expert Mode` 활성화 시, 제작자가 설정한 모든 제한이 해제되어 모든 속성과 스타일을 자유롭게 재정의(Override)할 수 있다. 이렇게 수정된 컴포언트는 **'사용자 정의 컴포넌트'**가 된다.

### 4. 하단 도크 (Bottom Dock)
`페이지 빌드 모드`에서 페이지의 동적인 로직을 설정하는 전문가용 공간.

* **Data 탭**: 페이지에서 사용할 **전역 데이터 객체**를 JSON 형태로 확인하고 편집한다. (`state.data`)
* **Actions 탭**: 선택된 컴포넌트의 이벤트(예: `onClick`)에 실행할 **액션 시퀀스**를 정의한다. (예: 'Alert 띄우기', '데이터 변경하기' 등)
* **Flows 탭**: 페이지 간의 이동(`Maps`)이나 프래그먼트(팝업 등) 열기/닫기 등 **전체적인 사용자 흐름**을 정의한다.
* **Fragments 탭**: 페이지 내에서 동적으로 표시될 수 있는 UI 조각(팝업, 드롭다운 메뉴 등)을 관리한다.

---

## 5. 정책 상세 정의 (TagPolicy & StylePolicy)

| 태그      | 허용 속성 (TagPolicy)                                 | 제한 스타일 (StylePolicy - Deny)                                                                      |
| :-------- | :---------------------------------------------------- | :---------------------------------------------------------------------------------------------------- |
| **`<img>`** | `src`, `alt`, `loading`, `decoding` 등              | `color`, `fontSize`, `fontWeight`, `textAlign`, `fontFamily` (Typography), `background` (Background) 등 |
| **`<button>`**| `type`, `disabled`, `name`, `value` 등                | `flexDirection`, `justifyContent`, `alignItems` 등 컨테이너 전용 스타일                                   |
| **`<a>`** | `href`, `target`, `rel` 등                            | `flexDirection`, `justifyContent`, `alignItems` 등 컨테이너 전용 스타일                                   |
| **`<span>`** | (전역 속성 외 없음)                                   | `width`, `height`, `flexDirection` 등 블록 레벨 레이아웃 스타일                                           |
| **`<div>`** | (전역 속성 외 없음)                                   | (제한 없음 - 모든 스타일 허용)                                                                        |

---
--- 끝 ---