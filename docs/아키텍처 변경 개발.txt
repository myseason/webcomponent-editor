개발 계획 (단계)

Phase 1 — 엔진/컨트롤러 스켈레톤 도입 (추가만, 무중단)
	•	engine/EditorEngine.ts : 조회·명령 파사드(현재 useEditor() 래핑)
	•	engine/CommandBus.ts : 명령 실행/Undo·Redo(현 historySlice는 유지; 아직 미연결)
	•	engine/selectors/inspector.ts : Inspector 타깃 노드 계산(페이지/컴포넌트 모드 반영), 그래프 유틸
	•	controllers/InspectorController.ts : Inspector ViewModel 뼈대 조립(정책 훅은 아직 빈 구현)
	•	controllers/hooks.ts : useInspectorViewModel() 훅 (현재는 내부적으로만 사용 가능)

결과: 코드베이스에 중앙 진입점/계산 경로가 생깁니다. 아직 기존 UI는 그대로지만, 2단계부터 안전하게 갈아탈 수 있는 레일을 놓습니다.

Phase 2 — Inspector.tsx “타깃 계산”만 중앙화 (저위험 연결)
	•	Inspector.tsx에서 선택 타깃(nodeId/defId) 계산을 useInspectorViewModel() 값으로 교체
	•	섹션(Commons/Props/Styles)은 기존 인터페이스 유지, 전달값만 VM 기준으로 통일
	•	(정책/레이아웃 로직은 그대로)

Phase 3 — PolicyEngine 중앙화 (표시/제약/프리셋 일괄 적용)
	•	기존의 가시성/잠금/제약 로직을 섹션에서 제거 → PolicyEngine에서 파이프라인 처리
	•	Controller가 정책이 반영된 최종 ViewModel을 섹션에 전달

Phase 4 — CommandBus 경로 통일 및 Undo/Redo 정합성 강화
	•	섹션에서의 변경 호출을 모두 EditorEngine → CommandBus.execute() 경로로 통일
	•	현 historySlice와의 정합성 확보(어댑터 계층)

Phase 5 — Persistence 어댑터 포트화 (서버 연동 대비)
	•	engine/adapters/LocalPersistence.ts(기존 persistenceV4.ts 래핑)
	•	engine/adapters/HttpPersistence.ts(추후 서버 저장 도입 시 교체)
	•	인증/권한 헤더 부착 위치와 에러 규약 정의